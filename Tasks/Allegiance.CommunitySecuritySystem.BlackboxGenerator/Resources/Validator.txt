using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Cryptography;
using System.Text;

namespace Allegiance.CommunitySecuritySystem.Blackbox
{
    public class Validator
    {
        #region Fields

        private const int _dwSize = 2048;
        
        private const int _chunkSize = 2048 / 8 - 42;

        private static int _seed = -51810617;

        private static string _rsaKey = "";

        private static SecureString _token = null;
        
        private static bool _debugMode = false;

        #endregion

        #region Methods

        public static byte[] Check(MachineInformation information)
        {
            if(_token == null)
                _token = GenerateToken();

            lock (information)
            {
                try
                {
                    IntPtr ptr = Marshal.SecureStringToBSTR(_token);
                    information.Token = Marshal.PtrToStringBSTR(ptr);
                    return EncryptRSA(information.Serialize());
                }
                finally
                {
                    information.Token   = string.Empty;
                }
            }
        }

        private static SecureString GenerateToken()
        {
            byte[] hash;
            Assembly asm = Assembly.GetEntryAssembly();

			if(_debugMode == false)
			{
				using (SHA256Managed sha = new SHA256Managed())
				using (FileStream fs   = File.OpenRead(asm.Location))
					hash = sha.ComputeHash(fs);
			}
			else
			{   
				// For Debugging: force the token to always match. This will let you 
				// change Launcher.exe, and run it from inside a debugger without having to 
				// regenerate blackboxes, and late attach your debugger.
				hash = new byte[] {	0x37, 0x61, 0xA7, 0x4B, 0x7E, 0x31, 0xC8, 0x5E, 0xD1, 0xC0, 0xF7, 0xB3, 
									0x95, 0xD4, 0x7E, 0x64, 0xB9, 0xC3, 0x22, 0xED, 0x2F, 0x6F, 0xF8, 0xEB, 
									0x4D, 0xA1, 0x00, 0x9A, 0x35, 0xE5, 0x10, 0x19 };
			}

            StringBuilder sb    = new StringBuilder();
            Random rand         = new Random(_seed);

			_randomMethod

            string value    = sb.ToString();
            byte[] data     = Encoding.UTF8.GetBytes(value);
            string iv       = GeneratePassword(0xa19c62);
            PasswordDeriveBytes pdb = new PasswordDeriveBytes(Encoding.UTF8.GetBytes(value), Encoding.UTF8.GetBytes(value));

            using (Rijndael alg = Rijndael.Create())
            {
                alg.Key = pdb.GetBytes(32);
                alg.IV  = pdb.GetBytes(16);

                using (MemoryStream ms = new MemoryStream())
                using (CryptoStream cs = new CryptoStream(ms, alg.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(hash, 0, hash.Length);
                    cs.Close();

                    data = ms.ToArray();
                }
            }

            using (SHA256Managed sha = new SHA256Managed())
            {
                SecureString result = new SecureString();
                foreach(char s in BitConverter.ToString(sha.ComputeHash(data)))
                    result.AppendChar(s);

                result.MakeReadOnly();
                return result;
            }
        }

        private static byte[] EncryptRSA(byte[] data)
        {
            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(_dwSize))
            using (MemoryStream ms = new MemoryStream())
            {
                rsa.ImportCspBlob(Convert.FromBase64String(_rsaKey));

                for(int i = 0; i < data.Length; i += _chunkSize)
                {
                    int amount      = Math.Min(_chunkSize, data.Length - i);
                    byte[] buffer   = new byte[amount];

                    Buffer.BlockCopy(data, i, buffer, 0, amount);

                    byte[] encrypted = rsa.Encrypt(buffer, false);
                    ms.Write(encrypted, 0, encrypted.Length);
                }

                return ms.ToArray();
            }
        }

        private static string GeneratePassword(int seed)
        {
            StringBuilder sb = new StringBuilder();
            Random rand = new Random(seed);
            int len = rand.Next(16, 31);

            for (int i = 0; i < len; i++)
                sb.Append((char)rand.Next(97, 122));

            return sb.ToString();
        }

        #endregion
    }
}